{{ template "header.tmpl" . }}

<div class="row">
  <div class="col-md-12">
    <table class="table">
      <tr>
        <th>Name</th>
        <th>Started</th>
        <th>Actions</th>
      </tr>
      <tr>
        <td><a href="#{{ .Service.Name }}">{{ .Service.Name }}</a></td>
        <td>{{ .Service.Started.Format "Mon Jan _2 15:04:05 MST 2006" }}</td>
        <td style="display: flex; flex-wrap: wrap; gap: 1em">
{{ if .Service.Stopped }}
          <form method="POST" action="/restart">
            <input type="hidden" name="xsrftoken" value="{{ .XsrfToken }}">
            <input type="hidden" name="path" value="{{ .Service.Name }}">
            <input type="hidden" name="supervise" value="once">
            <input type="submit" value="▶ run once">
          </form>

          <form method="POST" action="/restart">
            <input type="hidden" name="xsrftoken" value="{{ .XsrfToken }}">
            <input type="hidden" name="path" value="{{ .Service.Name }}">
            <input type="hidden" name="supervise" value="loop">
            <input type="submit" value="🔁 supervise (run in a loop)">
          </form>
{{ else }}
          <form method="POST" action="/stop">
            <input type="hidden" name="xsrftoken" value="{{ .XsrfToken }}">
            <input type="hidden" name="path" value="{{ .Service.Name }}">
            <input type="submit" value="❌ stop">
          </form>
{{ end }}
        </td>
      </tr>
    </table>

    {{ if (ne .Service.Diverted "") }}
    <p>
      Diverted: <code>{{ .Service.Diverted }}</code>
    </p>
    {{ end }}

    <h3>stdout</h3>
    <pre id="stdout"></pre>

    <h3>stderr</h3>
    <pre id="stderr"></pre>

    <h3>module info</h3>
    <pre>{{ .Service.ModuleInfo }}</pre>

  </div>
</div>

{{ template "footer.tmpl" . }}

<script>const maxLines = 101;
    function newLogrotate(elt) {
      var lines = 0;
      return function (e) {
        const line = e.data;
        const txt = elt.innerText + line + "\n";
        lines += line.split("\n").length;

        var toRemove = lines - maxLines;
        var i = 0;
        while (toRemove-- > 0) {
          i = txt.indexOf("\n", i) + 1;
          lines--;
        }
        elt.innerText = txt.slice(i);
      };
    }

    new EventSource("/log?path={{ .Service.Name }}&stream=stderr", {
      withCredentials: true,
    }).onmessage = newLogrotate(document.getElementById("stderr"));

    new EventSource("/log?path={{ .Service.Name }}&stream=stdout", {
      withCredentials: true,
    }).onmessage = newLogrotate(document.getElementById("stdout"));
</script>
